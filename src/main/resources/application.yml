spring:
  datasource:
    url: ${SQL_DB_URL}
    username: ${SQL_DB_USERNAME}
    password: ${SQL_DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: https://studylink.store/login/oauth2/code/naver
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: https://studylink.store/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            client-name: Kakao
            scope:
              - profile_nickname
              - account_email

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response #회원정보를 json으로 받는데 response라는 키값으로 네이버가 리턴해준다.
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
  jpa:
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 1000
    database-platform: org.hibernate.dialect.MySQL8Dialect

jwt:
  secret: ${JWT_SECRET} #64글자 이상의 영어 알파벳으로 이루어진 값으로 사용
#  redirect: http://localhost:8080/login?name=%s&access_token=%s&refresh_token=%s # 소셜 로그인 성공 이후 프론트엔드 측으로 보내줄 리다이렉트 URI
  access-token:
    expiration-time: 3600000 #액세스 토큰의 유효기간
  refresh-token:
    expiration-time: 604800000 #리프레쉬 토큰의 유효기간

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always

server:
  protocol: https
  host: api.studylink.store
  port: 8081

livekit:
  api:
    key: ${LIVEKIT_API_KEY}
    secret: ${LIVEKIT_API_SECRET}
